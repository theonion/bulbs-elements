#!/usr/bin/env node
var Van = require('van')
var watch = require('watch');
var webpack, karma, watcher;
var path = require('path');
var paths = ['../elements', '../lib'];

paths.forEach(function (_path) {
  watch.createMonitor(path.resolve(__dirname, _path), function (monitor) {
    monitor.on('created', function () {
      webpack.stop();
      startWebpack();
    });
    monitor.on('removed', function () {
      webpack.stop();
      startWebpack();
    });

    process.on('SIGINT', function () {
      monitor.stop();
    });
  });
});

function startKarma () {
  console.log('Starting Karma');
  karma = new Van({
    scripts: {
      karma: 'node_modules/.bin/karma start --reporters dots | sed \'/LOG:/d\'',
    },
  });
  karma.start();
}

function startWebpack () {
  console.log('Starting Webpack');
  webpack = new Van({
    scripts: {
      webpackServe: 'scripts/webpack-dev-server',
    },
  });
  webpack.start();
  webpack.finish = function () {
    console.log('Stopped a webpack process');
  };
}

startKarma();
startWebpack();

process.on('SIGINT', function() {
  // send a kill signal to each child process
  karma.stop();
  webpack.stop();
});
